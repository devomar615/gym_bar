import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:gym_bar/core/models/category.dart';import 'package:gym_bar/core/services/add_product_services.dart';import 'package:gym_bar/core/services/quantity_purchase_services.dart';import 'package:gym_bar/core/view_models/branch_model.dart';import 'package:gym_bar/core/view_models/category_model.dart';import 'package:gym_bar/core/view_models/product_model.dart';import 'package:gym_bar/ui/shared/dimensions.dart';import 'package:gym_bar/ui/shared/text_styles.dart';import 'package:gym_bar/ui/widgets/custom_card_item.dart';import 'package:gym_bar/ui/widgets/form_widgets.dart';import 'package:provider/provider.dart';class Categories extends StatelessWidget {  final _formKey = GlobalKey<FormState>();  @override  Widget build(BuildContext context) {    CustomCardItem cardItem = CustomCardItem(context: context);    Dimensions _dimensions = Dimensions(context);    FormWidget _formWidget = FormWidget(context: context);    TextStyles _textStyles = TextStyles(context: context);    AddProductServices addProductServices = Provider.of<AddProductServices>(context);    CategoryModel categoryModel = Provider.of<CategoryModel>(context);    List<Category> categories = categoryModel.categories;    ProductModel productModel = Provider.of<ProductModel>(context, listen: false);    QuantityPurchaseServices quantityPurchaseServices =        Provider.of<QuantityPurchaseServices>(context, listen: false);    var branch = Provider.of<BranchModel>(context).selectedBranch;    _addCategoryDialog() {      showDialog<void>(        context: context,        barrierDismissible: true,        // false = user must tap button, true = tap outside dialog        builder: (BuildContext dialogContext) {          return AlertDialog(            title: Text(              'اضافه نوع منتج جديد',              style: _textStyles.formLabelsStyleBlack(),            ),            content: Form(                key: _formKey,                child: _formWidget.formTextFieldTemplate(                    border: false,                    hint: "'اكتب نوع المنتج هنا",                    controller: addProductServices.newCategoryName)),            actions: <Widget>[              FlatButton(                  child: Text(                    'اتمام',                  ),                  onPressed: () {                    if (_formKey.currentState.validate()) {                      Navigator.of(dialogContext).pop();                      categoryModel.addCategory(Category(                        photo: "photo",                        name: addProductServices.newCategoryName.text,                      ));                      // Dismiss alert dialog                    }                  }),              FlatButton(                  child: Text(                    'الغاء',                  ),                  onPressed: () {                    Navigator.of(dialogContext).pop();                  }),            ],          );        },      );    }    return Scaffold(        appBar: AppBar(          title: Text("اختر نوع المنتج"),          actions: [            IconButton(                icon: Icon(Icons.add),                onPressed: () {                  _addCategoryDialog();                  addProductServices.newCategoryName.clear();                })          ],        ),        body: categories == null            ? Center(child: CircularProgressIndicator())            : CustomScrollView(                slivers: <Widget>[                  SliverGrid(                    gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 2),                    delegate: SliverChildBuilderDelegate(                      (BuildContext context, int index) {                        return categories.isEmpty                            ? Center(child: Text('لا يوجد منتجات هنا'))                            : Padding(                                padding: EdgeInsets.only(                                    left: _dimensions.widthPercent(1),                                    top: _dimensions.heightPercent(3),                                    right: _dimensions.widthPercent(1)),                                child: cardItem.item(                                    onPress: () {                                      productModel.fetchProductByCategoryName(                                          branchName: branch,                                          categoryName: categories[index].name);                                      addProductServices.selectedCategory =                                          categories[index].name;                                      quantityPurchaseServices.selectedCategory =                                          categories[index].name;                                      Navigator.pushNamed(context, '/products');                                    },                                    assetImage: "assets/images/categories.jpeg",                                    title: categories[index].name),                              );                      },                      childCount: categories.length,                    ),                  ),                  SliverList(                    delegate: SliverChildListDelegate(                      [],                    ),                  ),                ],              ));  }}