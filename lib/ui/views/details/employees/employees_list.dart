import 'package:flutter/material.dart';import 'package:flutter/painting.dart';import 'package:gym_bar/core/enums.dart';import 'package:gym_bar/core/models/employee.dart';import 'package:gym_bar/core/view_models/branch_model.dart';import 'package:gym_bar/core/view_models/employee_model.dart';import 'package:gym_bar/core/view_models/transaction_model.dart';import 'package:gym_bar/ui/shared/dimensions.dart';import 'package:gym_bar/ui/shared/text_styles.dart';import 'package:provider/provider.dart';class EmployeesList extends StatelessWidget {  @override  Widget build(BuildContext context) {    TransactionModel transactionModel = Provider.of<TransactionModel>(context, listen: false);    EmployeeModel employeeModel = Provider.of<EmployeeModel>(context);    BranchModel branchModel = Provider.of<BranchModel>(context);    String selectedEmployeeType = employeeModel.selectedEmployeeType;    // print("filtering");    // List<Employee> filteredEmployees = employeeModel.filterEmployees(    //     selectedEmployeeType: selectedEmployeeType, liveEmployees: _liveEmployees);    Dimensions _dimensions = Dimensions(context);    TextStyles _textStyles = TextStyles(context: context);    Widget popUpSortSelection(List<Employee> _liveEmployees) => PopupMenuButton<SortSelection>(        icon: Icon(          Icons.sort,          size: _dimensions.widthPercent(8),        ),        onSelected: (SortSelection selectedSort) {          if (selectedSort == SortSelection.sortByName) {            employeeModel.onSortName(_liveEmployees);          }          if (selectedSort == SortSelection.sortByCash) {            employeeModel.onSortCash(_liveEmployees);          }        },        itemBuilder: (BuildContext context) {          return [            PopupMenuItem<SortSelection>(              child: Text("تصنيف حسب الاسم"),              value: SortSelection.sortByName,            ),            PopupMenuItem<SortSelection>(              child: Text("تصنيف حسب الرصيد"),              value: SortSelection.sortByCash,            ),          ];        });    List<Widget> employeeTypeChoices() {      return [        ChoiceChip(          padding:              EdgeInsets.symmetric(horizontal: _dimensions.widthPercent(5), vertical: _dimensions.heightPercent(0.4)),          labelStyle: _textStyles.chipLabelStyleLight(),          selectedColor: Colors.blue,          backgroundColor: Colors.white,          shape: StadiumBorder(            side: BorderSide(color: Colors.blue),          ),          label: Text("مدين"),          selected: selectedEmployeeType == "مدين",          onSelected: (_) => employeeModel.selectedEmployeeType = "مدين",        ),        SizedBox(width: _dimensions.widthPercent(2)),        ChoiceChip(          padding:              EdgeInsets.symmetric(horizontal: _dimensions.widthPercent(5), vertical: _dimensions.heightPercent(0.4)),          labelStyle: _textStyles.chipLabelStyleLight(),          backgroundColor: Colors.white,          selectedColor: Colors.blue,          shape: StadiumBorder(side: BorderSide(color: Colors.blue)),          label: Text("دائن"),          selected: selectedEmployeeType == "دائن",          onSelected: (_) => employeeModel.selectedEmployeeType = "دائن",        ),        SizedBox(width: _dimensions.widthPercent(2)),        ChoiceChip(          padding:              EdgeInsets.symmetric(horizontal: _dimensions.widthPercent(5), vertical: _dimensions.heightPercent(0.4)),          labelStyle: _textStyles.chipLabelStyleLight(),          backgroundColor: Colors.white,          selectedColor: Colors.blue,          shape: StadiumBorder(            side: BorderSide(color: Colors.blue),          ),          label: Text("الكل"),          selected: selectedEmployeeType == "all",          onSelected: (_) => employeeModel.selectedEmployeeType = "all",        ),      ];    }    employeesList() {      return Consumer<List<Employee>>(        builder: (_, employees, __) {          var filteredEmployees =              employeeModel.filterEmployees(selectedEmployeeType: selectedEmployeeType, liveEmployees: employees);          return employees == null              ? Center(child: CircularProgressIndicator())              : filteredEmployees.isEmpty                  ? Padding(                      padding: EdgeInsets.symmetric(horizontal: _dimensions.widthPercent(3)),                      child: Center(                        child: Text(                          "لا يوجد عملاء هنا اضغط الزر السفلي لاضافة اول عميل",                          style: _textStyles.warningStyle(),                        ),                      ),                    )                  : Column(                      children: [                        Row(                          children: [                            SizedBox(                              width: _dimensions.widthPercent(2),                            ),                            popUpSortSelection(employees),                          ],                        ),                        Expanded(                          child: ListView.builder(                            itemCount: filteredEmployees.length,                            itemBuilder: (BuildContext context, int index) {                              return Padding(                                padding: EdgeInsets.symmetric(                                    vertical: _dimensions.heightPercent(0.4), horizontal: _dimensions.widthPercent(1)),                                child: Card(                                  color: Colors.white,                                  shape: RoundedRectangleBorder(                                    borderRadius: BorderRadius.circular(_dimensions.heightPercent(1)),                                  ),                                  child: ListTileTheme(                                    selectedColor: filteredEmployees[index].type == 'دائن' ? Colors.red : Colors.blue,                                    child: ListTile(                                      leading: Icon(                                        Icons.account_circle,                                        size: _dimensions.widthPercent(10),                                      ),                                      title: Text(                                        filteredEmployees[index].name,                                        style: _textStyles.profileNameTitleStyle(),                                      ),                                      subtitle: Text(filteredEmployees[index].cash,                                          style: _textStyles.listCashStyle(filteredEmployees[index].type)),                                      onTap: () {                                        employeeModel.selectedEmployee = filteredEmployees[index];                                        transactionModel.fetchTransactionByCustomerName(                                            branchName: branchModel.selectedBranch,                                            customerName: filteredEmployees[index].name);                                        Navigator.pushNamed(context, '/one_employee_info');                                      },                                    ),                                  ),                                ),                              );                            },                          ),                        ),                      ],                    );        },      );    }    return StreamProvider<List<Employee>>(        create: (_) => EmployeeModel().fetchEmployeeStream(branchName: branchModel.selectedBranch),        initialData: null,        child: Scaffold(          appBar: AppBar(            title: Text("العملاء"),          ),          floatingActionButton: FloatingActionButton(            onPressed: () {              Navigator.pushNamed(context, "/add_person");            },            backgroundColor: Colors.red,            child: Icon(Icons.person_add, color: Colors.white),          ),          body: Column(            children: [              SizedBox(height: _dimensions.heightPercent(3)),              Row(                mainAxisAlignment: MainAxisAlignment.spaceEvenly,                children: employeeTypeChoices(),              ),              SizedBox(height: _dimensions.heightPercent(1)),              Expanded(child: employeesList()),              // Container(              //     height: _dimensions.heightPercent(50), child: employeesList()),            ],          ),        ));  }}