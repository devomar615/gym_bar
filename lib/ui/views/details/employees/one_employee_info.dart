import 'dart:io';import 'package:flutter/material.dart';import 'package:flutter/painting.dart';import 'package:flutter/services.dart';import 'package:gym_bar/core/enums.dart';import 'package:gym_bar/core/models/employee.dart';import 'package:gym_bar/core/models/my_transaction.dart';import 'package:gym_bar/core/models/total.dart';import 'package:gym_bar/core/view_models/branch_model.dart';import 'package:gym_bar/core/view_models/employee_model.dart';import 'package:gym_bar/core/view_models/total_model.dart';import 'package:gym_bar/core/view_models/transaction_model.dart';import 'package:gym_bar/ui/shared/dimensions.dart';import 'package:gym_bar/ui/shared/text_styles.dart';import 'package:gym_bar/ui/widgets/form_widgets.dart';import 'package:intl/intl.dart';import 'package:provider/provider.dart';class OneEmployeeInfo extends StatelessWidget {  final File file = File("");  final transactorName = "عمر";  @override  Widget build(BuildContext context) {    TextStyles _textStyles = TextStyles(context: context);    Dimensions _dimensions = Dimensions(context);    FormWidget _formWidget = FormWidget(context: context);    final branch = Provider.of<BranchModel>(context).selectedBranch;    TotalModel totalModel = Provider.of<TotalModel>(context, listen: false);    EmployeeModel employeeModel = Provider.of<EmployeeModel>(context);    TransactionModel transactionModel = Provider.of<TransactionModel>(context);    List<Total> total = totalModel.total;    List<MyTransaction> filteredTransactions = transactionModel.filteredTransactions;    Employee selectedEmployee = employeeModel.selectedEmployee;    // var filteredTransactions = transactionModel.filteredTransactions;    transaction(type) {      transactionModel.addTransaction(          branchName: branch,          transaction: MyTransaction(            transactorName: transactorName,            transactionType: type,            transactionAmount: employeeModel.cashToAdd.toString(),            customerName: selectedEmployee.name,            date: DateFormat('yyyy-MM-dd').format(DateTime.now()),            hour: DateFormat('h:mm a').format(DateTime.now()),            branch: branch,          ));    }    updateTreasury({String transactionType}) async {      totalModel.fetchTotal();      double currentCash = double.parse(total[0].cash);      double updatedCash = transactionType == "ايداع"          ? currentCash + employeeModel.cashToAdd          : currentCash - employeeModel.cashToAdd;      totalModel.updateTotal(docId: branch, data: {'cash': updatedCash.toString()});    }    updateEmployeeCash({String transactionType}) async {      Employee employee =          await employeeModel.fetchEmployeeById(branchName: branch, id: selectedEmployee.id);      double currentCash = double.parse(employee.cash);      double updatedCash = transactionType == "ايداع"          ? currentCash + employeeModel.cashToAdd          : currentCash - employeeModel.cashToAdd;      String updatedType;      if (updatedCash == 0) updatedType = "خالص";      if (updatedCash < 0) updatedType = "دائن";      if (updatedCash > 0) updatedType = "مدين";      employeeModel.updateEmployee(          branchName: branch,          employeeId: selectedEmployee.id,          data: {'cash': updatedCash.toString(), 'type': updatedType});    }    onTapTransaction(String type) => showDialog<void>(          context: context,          barrierDismissible: true,          // false = user must tap button, true = tap outside dialog          builder: (BuildContext dialogContext) {            return AlertDialog(              title: Text(type),              content: _formWidget.formTextFieldTemplate(                  onChanged: (value) {                    print(value);                    employeeModel.cashToAdd = double.parse(value);                    print(employeeModel.cashToAdd);                  },                  hint: 'اكتب المبلغ هنا',                  maxLength: 3,                  maxLengthEnforced: true,                  inputFormatters: [                    FilteringTextInputFormatter.allow(RegExp(r'[0-9]')),                  ],                  keyboardType: TextInputType.number),              actions: <Widget>[                FlatButton(                  child: Text('اتمام'),                  onPressed: () {                    if (employeeModel.cashToAdd > 0) {                      updateEmployeeCash(transactionType: type);                      transaction(type);                      updateTreasury(transactionType: type);                    } else                      print("cash cannot be null or equal 0");                    Navigator.of(dialogContext).pop(); // Dismiss alert dialog                  },                ),                FlatButton(                  child: Text('الغاء'),                  onPressed: () {                    Navigator.of(dialogContext).pop(); // Dismiss alert dialog                  },                ),              ],            );          },        );    Widget transactionChoices(String type) {      return GestureDetector(        onTap: () {          onTapTransaction(type);        },        child: Container(          child: ClipRRect(            borderRadius: BorderRadius.circular(_dimensions.heightPercent(3)),            child: Image.asset(                type == "ايداع" ? 'assets/images/deposit.png' : 'assets/images/withdraw.png',                width: _dimensions.heightPercent(7),                height: _dimensions.heightPercent(7)),          ),        ),      );    }    Widget addPhoto() {      if (file == null) {        return _formWidget.logo(            imageContent: Image.asset("assets/images/myprofile.jpg", fit: BoxFit.cover),            backgroundColor: Colors.white);      } else        return _formWidget.logo(imageContent: Image.file(file, fit: BoxFit.cover));    }    tableHead() {      return Container(        height: 50,        color: Colors.blue,        child: Row(          mainAxisAlignment: MainAxisAlignment.spaceAround,          children: <Widget>[            GestureDetector(                onTap: () {                  // transactionModel.changeAmountAscendingState();                  transactionModel.onSortAmount();                },                child: Center(                    child: Row(                  mainAxisAlignment: MainAxisAlignment.center,                  children: <Widget>[                    Text("القيمة", style: _textStyles.tableTitleStyle()),                    SizedBox(width: 10),                    Icon(transactionModel.sortAmountIcon)                  ],                ))),            GestureDetector(                onTap: () {                  // transactionModel.changeHourAscendingState();                  transactionModel.onSortHour();                },                child: Center(                    child: Row(                  mainAxisAlignment: MainAxisAlignment.center,                  children: <Widget>[                    Text("الساعة", style: _textStyles.tableTitleStyle()),                    SizedBox(width: 10),                    Icon(transactionModel.sortHourIcon)                  ],                ))),          ],        ),      );    }    tableBuilder() {      return ListView.builder(        shrinkWrap: true,        itemCount: filteredTransactions.length,        itemBuilder: (BuildContext context, int index) {          return Column(            children: <Widget>[              Container(                height: 50,                child: GestureDetector(                  onTap: () {                    print("dsdasdads");                    transactionModel.selectedTransaction = filteredTransactions[index];                    Navigator.pushNamed(context, '/selected_transaction');                  },                  child: Row(                    mainAxisAlignment: MainAxisAlignment.spaceAround,                    children: <Widget>[                      Text(                        filteredTransactions[index].transactionAmount == ""                            ? 'null'                            : filteredTransactions[index].transactionAmount,                        style: _textStyles.tableContentStyle(),                      ),                      Text(                        filteredTransactions[index].hour,                        style: _textStyles.tableContentStyle(),                      ),                    ],                  ),                ),              ),              Divider(height: 1, color: Colors.black),            ],          );        },      );    }    return Scaffold(      appBar: AppBar(        // backgroundColor: Colors.blue,        elevation: 0,        actions: [          IconButton(icon: Icon(Icons.edit), onPressed: () {}),        ],      ),      body: transactionModel.status == Status.Busy          ? Center(child: CircularProgressIndicator())          : filteredTransactions == null              ? Center(child: CircularProgressIndicator())              : ListView(                  children: <Widget>[                    SizedBox(height: _dimensions.heightPercent(2)),                    Container(                        width: _dimensions.heightPercent(13),                        height: _dimensions.heightPercent(13),                        child: addPhoto()),                    SizedBox(height: _dimensions.heightPercent(2)),                    Center(                        child: Text(                      selectedEmployee.name,                      style: _textStyles.tableContentStyle(),                    )),                    SizedBox(height: _dimensions.heightPercent(2)),                    //header("الوصف"),                    Row(                      mainAxisAlignment: MainAxisAlignment.spaceEvenly,                      children: [                        Column(                          children: [                            transactionChoices("سحب"),                            Text(                              "سحب",                              style: _textStyles.iconTitle(),                            )                          ],                        ),                        SizedBox(width: _dimensions.widthPercent(1)),                        Column(                          children: [                            transactionChoices("ايداع"),                            Text(                              "ايداع",                              style: _textStyles.iconTitle(),                            )                          ],                        )                      ],                    ),                    SizedBox(height: _dimensions.heightPercent(2)),                    tableHead(),                    SizedBox(height: _dimensions.heightPercent(2)),                    tableBuilder(),                  ],                ),    );  }}