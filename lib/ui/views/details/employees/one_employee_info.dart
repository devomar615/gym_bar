import 'dart:io';import 'package:flutter/material.dart';import 'package:flutter/painting.dart';import 'package:flutter/services.dart';import 'package:gym_bar/core/enums.dart';import 'package:gym_bar/core/models/employee.dart';import 'package:gym_bar/core/models/my_transaction.dart';import 'package:gym_bar/core/models/total.dart';import 'package:gym_bar/core/view_models/branch_model.dart';import 'package:gym_bar/core/view_models/employee_model.dart';import 'package:gym_bar/core/view_models/total_model.dart';import 'package:gym_bar/core/view_models/transaction_model.dart';import 'package:gym_bar/ui/shared/dimensions.dart';import 'package:gym_bar/ui/shared/text_styles.dart';import 'package:gym_bar/ui/widgets/form_widgets.dart';import 'package:intl/intl.dart';import 'package:provider/provider.dart';File file;var transactorName = "عمر";class OneEmployeeInfo extends StatelessWidget {  final _formKey = GlobalKey<FormState>();  @override  Widget build(BuildContext context) {    TextStyles _textStyles = TextStyles(context: context);    Dimensions _dimensions = Dimensions(context);    FormWidget _formWidget = FormWidget(context: context);    TotalModel totalModel = Provider.of<TotalModel>(context, listen: false);    EmployeeModel employeeModel = Provider.of<EmployeeModel>(context);    TransactionModel transactionModel = Provider.of<TransactionModel>(context);    // List<Total> total = totalModel.total;    List<MyTransaction> filteredTransactions = transactionModel.filteredTransactions;    Employee selectedEmployee = employeeModel.selectedEmployee;    // var filteredTransactions = transactionModel.filteredTransactions;    var branchName = Provider.of<BranchModel>(context).selectedBranch;    transaction(type) {      transactionModel.addTransaction(          branchName: branchName,          transaction: MyTransaction(            transactorName: transactorName,            transactionType: type,            transactionAmount: employeeModel.cashToAdd.text,            customerName: selectedEmployee.name,            date: DateFormat('yyyy-MM-dd').format(DateTime.now()),            hour: DateFormat('h:mm a').format(DateTime.now()),            branch: branchName,          ));    }    updateTreasury({String transactionType}) async {      Total total = await totalModel.fetchTotal(branchName);      print("printing cash... ${total.cash}");      double currentCash = double.parse(total.cash);      print("printing cash...again");      print(currentCash);      print("${employeeModel.cashToAdd.text}");      double updatedCash = transactionType == "ايداع"          ? currentCash + double.tryParse(employeeModel.cashToAdd.text)          : currentCash - double.tryParse(employeeModel.cashToAdd.text);      print("updated cash " + updatedCash.toString());      totalModel.updateTotal(docId: branchName, data: {'cash': updatedCash.toString()});    }    updateEmployeeCash({String transactionType}) async {      Employee employee =      await employeeModel.fetchEmployeeById(branchName: branchName, id: selectedEmployee.id);      double currentCash = double.tryParse(employee.cash);      print("current cash for ${employee.name} is: ${currentCash.toString()}");      double updatedCash = transactionType == "ايداع"          ? currentCash + double.tryParse(employeeModel.cashToAdd.text)          : currentCash - double.tryParse(employeeModel.cashToAdd.text);      String updatedType;      if (updatedCash == 0) updatedType = "خالص";      if (updatedCash < 0) updatedType = "دائن";      if (updatedCash > 0) updatedType = "مدين";      employeeModel.updateEmployee(          branchName: branchName,          employeeId: selectedEmployee.id,          data: {'cash': updatedCash.toString(), 'type': updatedType});    }    onTapTransaction(String type) => showDialog<void>(      context: context,      barrierDismissible: true,      // false = user must tap button, true = tap outside dialog      builder: (BuildContext dialogContext) {        return AlertDialog(          title: Text(type),          content: Form(              key: _formKey,              child: _formWidget.formTextFieldTemplate(                controller: employeeModel.cashToAdd,                border: false,                hint: 'اكتب المبلغ هنا',                keyboardType: TextInputType.number,                maxLength: 3,                maxLengthEnforced: true,                inputFormatters: [                  FilteringTextInputFormatter.allow(RegExp(r'[0-9]')),                ],              )),          actions: <Widget>[            FlatButton(              child: Text('اتمام'),              onPressed: () {                Navigator.of(dialogContext).pop();                try {                  // Dismiss alert dialog                  if (_formKey.currentState.validate()) {                    updateEmployeeCash(transactionType: type);                    transaction(type);                    updateTreasury(transactionType: type);                    ScaffoldMessenger.of(context).showSnackBar(                      SnackBar(                        content: Text('العملية تمت بنجاح'),                      ),                    );                  }                } catch (err) {                  ScaffoldMessenger.of(context).showSnackBar(                    SnackBar(                      content: Text(err.toString()),                    ),                  );                }              },            ),            FlatButton(              child: Text('الغاء'),              onPressed: () {                Navigator.of(dialogContext).pop();                employeeModel.clear();              },            ),          ],        );      },    );    Widget transactionChoices(String type) {      return GestureDetector(        onTap: () {          employeeModel.clear();          onTapTransaction(type);        },        child: Container(          child: ClipRRect(            borderRadius: BorderRadius.circular(_dimensions.heightPercent(3)),            child: Image.asset(                type == "ايداع"                    ? 'assets/images/employee_clients/deposit.png'                    : 'assets/images/employee_clients/withdraw.png',                width: _dimensions.widthPercent(14),                height: _dimensions.widthPercent(14)),          ),        ),      );    }    Widget addPhoto() {      if (file == null) {        return _formWidget.logo(            imageContent: Image.asset("assets/images/employee_clients/default_profile.jpg",                fit: BoxFit.cover),            backgroundColor: Colors.white);      } else        return _formWidget.logo(imageContent: Image.file(file, fit: BoxFit.cover));    }    tableHead() {      return Container(        height: _dimensions.heightPercent(6),        color: Colors.blue,        child: Row(          mainAxisAlignment: MainAxisAlignment.spaceAround,          children: <Widget>[            GestureDetector(                onTap: () {                  // transactionModel.changeAmountAscendingState();                  transactionModel.onSortAmount();                },                child: Center(                    child: Row(                      mainAxisAlignment: MainAxisAlignment.center,                      children: <Widget>[                        Text("القيمة", style: _textStyles.tableTitleStyle()),                        SizedBox(width: _dimensions.widthPercent(3)),                        Icon(                          transactionModel.sortAmountIcon,                          size: _dimensions.widthPercent(7),                        )                      ],                    ))),            GestureDetector(                onTap: () {                  // transactionModel.changeHourAscendingState();                  transactionModel.onSortHour();                },                child: Center(                    child: Row(                      mainAxisAlignment: MainAxisAlignment.center,                      children: <Widget>[                        Text("الساعة", style: _textStyles.tableTitleStyle()),                        SizedBox(width: _dimensions.widthPercent(3)),                        Icon(                          transactionModel.sortHourIcon,                          size: _dimensions.widthPercent(7),                        )                      ],                    ))),          ],        ),      );    }    tableBuilder() {      return ListView.builder(        shrinkWrap: true,        itemCount: filteredTransactions.length,        itemBuilder: (BuildContext context, int index) {          return Column(            children: <Widget>[              GestureDetector(                onTap: () {                  print("dsdasdads");                  transactionModel.selectedTransaction = filteredTransactions[index];                  Navigator.pushNamed(context, '/selected_transaction');                },                child: Container(                    height: _dimensions.heightPercent(7),                    color: Colors.transparent,                    child: Row(                      mainAxisAlignment: MainAxisAlignment.spaceAround,                      children: <Widget>[                        Text(                          filteredTransactions[index].transactionAmount == ""                              ? 'null'                              : filteredTransactions[index].transactionAmount,                          style: _textStyles.tableContentStyle(),                        ),                        Text(                          filteredTransactions[index].hour,                          style: _textStyles.tableContentStyle(),                        ),                      ],                    )),              ),              Divider(height: 1, color: Colors.black),            ],          );        },      );    }    return Scaffold(      appBar: AppBar(        // backgroundColor: Colors.blue,        elevation: 0,        actions: [          IconButton(icon: Icon(Icons.edit), onPressed: () {}),        ],      ),      body: transactionModel.status == Status.Busy          ? Center(child: CircularProgressIndicator())          : filteredTransactions == null          ? Center(child: CircularProgressIndicator())          : ListView(        children: <Widget>[          SizedBox(height: _dimensions.heightPercent(2)),          Container(              width: _dimensions.widthPercent(27),              height: _dimensions.widthPercent(27),              child: addPhoto()),          SizedBox(height: _dimensions.heightPercent(2)),          Center(              child: Text(                selectedEmployee.name,                style: _textStyles.profileNameTitleStyle(),              )),          SizedBox(height: _dimensions.heightPercent(2)),          //header("الوصف"),          Row(            mainAxisAlignment: MainAxisAlignment.spaceEvenly,            children: [              Column(                children: [                  transactionChoices("سحب"),                  Text(                    "سحب",                    style: _textStyles.iconTitle(),                  )                ],              ),              SizedBox(width: _dimensions.widthPercent(1)),              Column(                children: [                  transactionChoices("ايداع"),                  Text(                    "ايداع",                    style: _textStyles.iconTitle(),                  )                ],              )            ],          ),          SizedBox(height: _dimensions.heightPercent(2)),          tableHead(),          // SizedBox(height: _dimensions.heightPercent(2)),          tableBuilder(),        ],      ),    );  }}