import 'package:flutter/material.dart';import 'package:gym_bar/core/enums.dart';import 'package:gym_bar/core/models/transaction.dart';import 'package:gym_bar/core/view_models/transaction_model.dart';import 'package:gym_bar/ui/shared/text_styles.dart';import 'package:gym_bar/ui/shared/ui_helpers.dart';import 'package:gym_bar/ui/views/base_view.dart';class Sells extends StatefulWidget {  final Map<String, dynamic> args;  const Sells({Key key, this.args}) : super(key: key);  @override  _SellsState createState() => _SellsState();}class _SellsState extends State<Sells> {  bool timeAscending = false;  bool employeeAscending = false;  bool customerAscending = false;  IconData sortTimeIcon = Icons.sort;  IconData sortEmployeeIcon = Icons.sort;  IconData sortCustomerIcon = Icons.sort;  String sendNull = "لا يوجد";  onSortTime(List<Transaction> transactions) {    if (timeAscending) {      setState(() {        sortTimeIcon = Icons.keyboard_arrow_down;        sortEmployeeIcon = Icons.sort;        sortCustomerIcon = Icons.sort;      });      transactions.sort((a, b) => a.hour.compareTo(b.hour));    } else {      setState(() {        sortTimeIcon = Icons.keyboard_arrow_up;        sortEmployeeIcon = Icons.sort;        sortCustomerIcon = Icons.sort;      });      transactions.sort((a, b) => b.hour.compareTo(a.hour));    }  }  onSortEmployee(List<Transaction> transactions) {    if (employeeAscending) {      setState(() {        sortEmployeeIcon = Icons.keyboard_arrow_down;        sortCustomerIcon = Icons.sort;        sortTimeIcon = Icons.sort;      });      transactions          .sort((a, b) => a.transactorName.compareTo(b.transactorName));    } else {      setState(() {        sortEmployeeIcon = Icons.keyboard_arrow_up;        sortCustomerIcon = Icons.sort;        sortTimeIcon = Icons.sort;      });      transactions          .sort((a, b) => b.transactorName.compareTo(a.transactorName));    }  }  onSortCustomer(List<Transaction> transactions) {    if (customerAscending) {      setState(() {        sortCustomerIcon = Icons.keyboard_arrow_down;        sortEmployeeIcon = Icons.sort;        sortTimeIcon = Icons.sort;      });      transactions          .sort((a, b) => a.customerName.compareTo(b.customerName));    } else {      setState(() {        sortCustomerIcon = Icons.keyboard_arrow_up;        sortEmployeeIcon = Icons.sort;        sortTimeIcon = Icons.sort;      });      transactions          .sort((a, b) => b.customerName.compareTo(a.customerName));    }  }  changeTimeAscendingState() {    setState(() {      timeAscending = !timeAscending;    });  }  changeEmployeeAscendingState() {    setState(() {      employeeAscending = !employeeAscending;    });  }  changeCustomerAscendingState() {    setState(() {      customerAscending = !customerAscending;    });  }  tableHead(transactions) {    return Container(      height: 50,      color: Colors.grey,      child: Row(        mainAxisAlignment: MainAxisAlignment.spaceAround,        children: <Widget>[          GestureDetector(              onTap: () {                changeTimeAscendingState();                onSortTime(transactions);              },              child: Center(                  child: Row(                mainAxisAlignment: MainAxisAlignment.center,                children: <Widget>[                  Text("الساعه", style: tableTitleStyle),                  SizedBox(width: 10),                  Icon(sortTimeIcon)                ],              ))),          GestureDetector(              onTap: () {                changeEmployeeAscendingState();                onSortEmployee(transactions);              },              child: Center(                  child: Row(                mainAxisAlignment: MainAxisAlignment.center,                children: <Widget>[                  Text("الموظف", style: tableTitleStyle),                  SizedBox(width: 10),                  Icon(sortEmployeeIcon)                ],              ))),          GestureDetector(              onTap: () {                changeCustomerAscendingState();                onSortCustomer(transactions);              },              child: Center(                  child: Row(                mainAxisAlignment: MainAxisAlignment.center,                children: <Widget>[                  Text("العميل", style: tableTitleStyle),                  SizedBox(width: 10),                  Icon(sortCustomerIcon)                ],              ))),        ],      ),    );  }  tableBuilder(List<Transaction> transactions) {    return ListView.builder(        itemCount: transactions.length,        itemBuilder: (BuildContext context, int index) {          return Column(            children: <Widget>[              Container(                height: 50,                child: GestureDetector(                  onTap: () {},                  child: Row(                    mainAxisAlignment: MainAxisAlignment.spaceAround,                    children: <Widget>[                      Text(                          transactions[index].hour == ""                              ? 'null'                              : transactions[index].hour,                          style: formTitleStyleLight),                      Text(transactions[index].transactorName,                          style: formTitleStyleLight),                      Text(transactions[index].customerName,                          style: formTitleStyleLight),                    ],                  ),                ),              ),              Divider(height: 1, color: Colors.black),            ],          );        });  }  table(transactions) {    return Column(      children: <Widget>[        tableHead(transactions),        Divider(          thickness: 3,          color: Colors.black54,          height: 3,        ),        Expanded(child: tableBuilder(transactions)),      ],    );  }  @override  Widget build(BuildContext context) {    print(widget.args['branchName']);    return BaseView<TransactionModel>(      onModelReady: (model) => model.fetchFilteredTransaction(        branchName: widget.args['branchName'],        field: 'date',        equalTo: widget.args['date'],        field2: 'transactionType',        equalTo2: 'selling',      ),      builder: (context, model, child) => Scaffold(        appBar: AppBar(          title: Text(widget.args['date']),        ),        body: model.state == ViewState.Busy            ? Center(child: CircularProgressIndicator())//              : alternativeTabel(model.employees)            : Column(                crossAxisAlignment: CrossAxisAlignment.stretch,                children: <Widget>[                  UIHelper.verticalSpaceLarge(),                  Expanded(child: table(model.transaction)),                ],              ),      ),    );  }}