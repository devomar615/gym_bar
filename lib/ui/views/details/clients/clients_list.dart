import 'package:flutter/material.dart';import 'package:flutter/painting.dart';import 'package:gym_bar/core/enums.dart';import 'package:gym_bar/core/models/client.dart';import 'package:gym_bar/core/view_models/client_model.dart';import 'package:gym_bar/core/view_models/transaction_model.dart';import 'package:gym_bar/ui/shared/dimensions.dart';import 'package:gym_bar/ui/shared/text_styles.dart';import 'package:provider/provider.dart';class ClientsList extends StatelessWidget {  @override  Widget build(BuildContext context) {    TransactionModel transactionModel = Provider.of<TransactionModel>(context, listen: false);    ClientModel clientModel = Provider.of<ClientModel>(context);    String selectedClientType = clientModel.selectedClientType;    List<Client> filteredClients = clientModel.filterClients(selectedClientType);    Dimensions _dimensions = Dimensions(context);    TextStyles _textStyles = TextStyles(context: context);    bool nameAscending = clientModel.nameAscending;    bool cashAscending = clientModel.cashAscending;    onSortName() {      nameAscending          ? filteredClients.sort((a, b) => a.name.compareTo(b.name))          : filteredClients.sort((a, b) => b.name.compareTo(a.name));    }    onSortCash() {      cashAscending          ? filteredClients.sort((a, b) => a.cash.compareTo(b.cash))          : filteredClients.sort((a, b) => b.cash.compareTo(a.cash));    }    Widget popUpSortSelection() => PopupMenuButton<SortSelection>(        icon: Icon(          Icons.sort,          size: _dimensions.widthPercent(8),        ),        onSelected: (SortSelection selectedSort) {          if (selectedSort == SortSelection.sortByName) {            onSortName();            clientModel.changeNameAscendingState();            clientModel.changeCashAscendingState();          }          if (selectedSort == SortSelection.sortByCash) {            onSortCash();            clientModel.changeNameAscendingState();            clientModel.changeCashAscendingState();          }        },        itemBuilder: (BuildContext context) {          return [            PopupMenuItem<SortSelection>(              child: Text("تصنيف حسب الاسم"),              value: SortSelection.sortByName,            ),            PopupMenuItem<SortSelection>(              child: Text("تصنيف حسب الرصيد"),              value: SortSelection.sortByCash,            ),          ];        });    List<Widget> clientTypeChoices() {      return [        ChoiceChip(          padding: EdgeInsets.symmetric(              horizontal: _dimensions.widthPercent(5), vertical: _dimensions.heightPercent(0.4)),          labelStyle: _textStyles.chipLabelStyleLight(),          selectedColor: Colors.blue,          backgroundColor: Colors.white,          shape: StadiumBorder(            side: BorderSide(color: Colors.blue),          ),          label: Text("مدين"),          selected: selectedClientType == "مدين",          onSelected: (_) => clientModel.selectedClientType = "مدين",        ),        SizedBox(width: _dimensions.widthPercent(2)),        ChoiceChip(          padding: EdgeInsets.symmetric(              horizontal: _dimensions.widthPercent(5), vertical: _dimensions.heightPercent(0.4)),          labelStyle: _textStyles.chipLabelStyleLight(),          backgroundColor: Colors.white,          selectedColor: Colors.blue,          shape: StadiumBorder(side: BorderSide(color: Colors.blue)),          label: Text("دائن"),          selected: selectedClientType == "دائن",          onSelected: (_) => clientModel.selectedClientType = "دائن",        ),        SizedBox(width: _dimensions.widthPercent(2)),        ChoiceChip(          padding: EdgeInsets.symmetric(              horizontal: _dimensions.widthPercent(5), vertical: _dimensions.heightPercent(0.4)),          labelStyle: _textStyles.chipLabelStyleLight(),          backgroundColor: Colors.white,          selectedColor: Colors.blue,          shape: StadiumBorder(            side: BorderSide(color: Colors.blue),          ),          label: Text("الكل"),          selected: selectedClientType == "all",          onSelected: (_) => clientModel.selectedClientType = "all",        ),      ];    }    clientsList() {      return Consumer<List<Client>>(        builder: (_, clients, __) {          return clients == null || clientModel.status == Status.Busy              ? Center(child: CircularProgressIndicator())              : ListView.builder(                  itemCount: filteredClients.length,                  itemBuilder: (BuildContext context, int index) {                    return Padding(                      padding: EdgeInsets.symmetric(                          vertical: _dimensions.heightPercent(0.4),                          horizontal: _dimensions.widthPercent(1)),                      child: Card(                        color: Colors.white,                        shape: RoundedRectangleBorder(                          borderRadius: BorderRadius.circular(_dimensions.heightPercent(1)),                        ),                        child: ListTileTheme(                          selectedColor: clients                                      .firstWhere(                                          (element) => element.id == filteredClients[index].id)                                      .type ==                                  'دائن'                              ? Colors.red                              : Colors.blue,                          child: ListTile(                            leading: Icon(                              Icons.account_circle,                              size: _dimensions.widthPercent(10),                            ),                            title: Text(                              filteredClients[index].name,                              style: _textStyles.profileNameTitleStyle(),                            ),                            subtitle: Text(                                clients                                    .firstWhere(                                        (element) => element.id == filteredClients[index].id)                                    .cash,                                style: _textStyles.listCashStyle(clients                                    .firstWhere(                                        (element) => element.id == filteredClients[index].id)                                    .type)),                            onTap: () {                              clientModel.selectedClient = clients.firstWhere(                                  (element) => element.id == filteredClients[index].id);                              transactionModel.fetchTransactionByCustomerName(                                  branchName: "بيفرلي",                                  customerName: filteredClients[index].name);                              Navigator.pushNamed(context, '/one_client_info');                            },                          ),                        ),                      ),                    );                  },                );        },      );    }    return Scaffold(      appBar: AppBar(        title: Text("العملاء"),      ),      body: Column(        children: [          SizedBox(height: _dimensions.heightPercent(3)),          Row(            mainAxisAlignment: MainAxisAlignment.spaceEvenly,            children: clientTypeChoices(),          ),          SizedBox(height: _dimensions.heightPercent(1)),          Row(            children: [              SizedBox(                width: _dimensions.widthPercent(2),              ),              popUpSortSelection(),            ],          ),          Expanded(child: clientsList()),          // Container(          //     height: _dimensions.heightPercent(50), child: clientsList()),        ],      ),    );  }}